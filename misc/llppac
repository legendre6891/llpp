#!/bin/sh
set -e

die() {
    echo "$1" >&2
    exit 1
}

cachedir="${XDG_CACHE_HOME:-$HOME/.cache}/llpp"
test -d "$cachedir" || die "cache directory '$cachedir' does not exist"

caspsuf=
type=

executable_p() {
    command -v "$1" >/dev/null 2>&1
}

missing() {
    executable_p $1 || \
        eval "$1() { die \"$2 is needed for \$type conversion\"; }"
}

maketext() {
    test -d "$cachedir/fonts" || mkdir "$cachedir/fonts"
    cat >"$cachedir/fonts/text" <<EOF
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
minim veniam, quis nostrud exercitation ullamco laboris nisi ut
aliquip ex ea commodo consequat. Duis aute irure dolor in
reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit anim id est laborum.
Posting Soccer Goals On Vine Is Illegal, Say England's Premier League
abcdefghizklmnopqrstwxyz
ABCDEFGHIZKLMNOPQRSTWXYZ
\`1234567890-=\\
~!@#\$%^&*()_+|
[];',./
{}:"<>?"

EOF
}

trap 'test -n "$casp" && rm -f "$casp"' 0

while getopts m:t:f opt; do
    case $opt in
        m) mime=$OPTARG;;
        t) type=$OPTARG;;
        f) force=1;;
        ?) die "usage: $0 [-m mime/type] [-t filter] [-f] [path|url]";;
    esac
done
shift $(($OPTIND - 1))
test -z "$1" && die "usage $0: path"

if test ! -e "$1" && expr >/dev/null "$1" : "\(ftp\|https\?\)://"; then
    if executable_p wget; then
        dl() {
            wget -q -c -nc $1 -O $2
        }
    elif executable_p curl; then
        dl() {
            curl $1 -o $2
        }
    else
        die "no program to fetch remote urls found"
    fi

    md5of="$cachedir/$(basename "$1")"
    dl "$1" "$md5of" || test -e "$md5of"
    shift
    set -- "$md5of" "$@"
else
    md5of="$1"
fi

test -z "$type" && {
    ft=$(file -L --mime-type -b "$1") || die "$ft"
}

case $ft in
    application/x-gzip | application/x-compress) dc=zcat;;
    application/x-xz) dc=xzcat;;
    application/x-bzip2) dc=bzcat;;
    *) unset dc || true;;
esac

filt='"${dc-cat}" "$1" |'

if test -z "$type"; then
    test -z "$mime" && mime=$(file -L --mime-type -bz "$1" || die "$mime")
    case $mime in
        application/postscript) type=ps;;
        application/pdf) type=pdf;;
        image/vnd.djvu) type=djvu;;
        text/html) type=html;;
        text/plain) type=text;;
        application/msword) type=word;;
        application/vnd.openxmlformats-officedocument.*  \
            | application/vnd.ms-powerpoint              \
            | application/vnd.ms-excel                   \
            | application/vnd.oasis.opendocument.*) type=uno;;
        image/svg+xml) type=svg;;
        image/png | image/jpeg) test -n "$dc" && type="image" || type="image2";;
        image/*) type=image;;
        application/x-dvi) type=dvi;;
        application/x-font-ttf | application/vnd.ms-opentype) type=font;;
        *) die "unhandled file type: '$mime'";;
    esac
fi

case $type in
    ps) conv='ps2pdf - "$casp"';;
    image2|pdf) test -z "$dc" && exec llpp "$@" || conv='cat >"$casp"';;
    djvu) conv='ddjvu -format=pdf - "$casp"';;
    html) {
        missing prince "PrinceXML(http://www.princexml.com/)"
        conv='prince -s /home/malc/xsrc/llpp/misc/rr.css - -o "$casp"'
    };;
    word) {
        if executable_p unoconv && test -z "$dc"; then
            unset filt
            caspsuf=.pdf
            conv='unoconv -o "$casp" "$1"'
        else
            missing antiword "antiword or unoconv"
            conv='antiword -m 8859-1.txt -a a4 - >"$casp"'
        fi
    };;
    uno) {
        test -n "$dc" && die "cannot convert compressed '$mime'"
        unset filt
        missing unoconv "unoconv(http://dag.wiee.rs/home-made/unoconv/)"
        conv='unoconv -o "$casp" "$1"'
        caspsuf=.pdf
    };;
    svg) {
        if executable_p inkscape && test -z "$dc"; then
            unset filt
            conv='inkscape -z -A "$casp" "$1"'
        else
            missing rsvg-convert "rsvg-convert"
            conv='rsvg-convert -f pdf -o "$casp"'
        fi
    };;
    font) {
        if test -e "$2"; then
            arg="$2"
        else
            arg="--waterfall $cachedir/fonts/text"
            maketext
        fi
        # https://mail.gnome.org/archives/gtk-i18n-list/2010-June/msg00000.html
        eval $filt cat >$cachedir/fonts/font
        cat >$cachedir/fonts/fonts.conf <<EOF
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
<dir>$cachedir/fonts/</dir>
<cachedir>$cachedir/fonts/</cachedir>
<config></config>
</fontconfig>
EOF
        unset filt
        missing pango-view "pango-view(http://www.pango.org/)"
        conv='FONTCONFIG_PATH=$cachedir/fonts/ pango-view -q $arg -o $casp'
        caspsuf=.pdf
    };;
    fcfont) {
        if test -e "$2"; then
            arg="$2"
        else
            arg="--waterfall $cachedir/fonts/text"
            maketext
        fi
        unset filt
        missing pango-view "pango-view(http://www.pango.org/)"
        conv='pango-view --font="$1" -q $arg -o $casp'
        caspsuf=.pdf
        md5of=/dev/null
        force=1
    };;
    image) {
        missing convert "convert(http://www.imagemagick.org/script/convert.php)"
        conv='convert - pdf:"$casp"'
    };;
    dvi) {
        test -n "$dc" && die "cannot convert compressed '$mime'"
        unset filt
        missing dvipdf "dvipdf(http://ghostscript.com/)"
        conv='dvipdf "$1" "$casp"'
    };;
    text) {
        missing pandoc "pandoc(http://pandoc.org/)"
        conv='pandoc -t epub - -o "$casp"'
        caspsuf=.epub
    };;
    *) die "unhandled filter type: '$type'";;
esac

hash=$(md5sum "$md5of") || die "$hash"
casp=$cachedir/${hash%% *}$caspsuf
(test -n "$force" -o ! -e "$casp") && eval "$filt" "$conv"

exec llpp -origin "$@" "$casp"
